type Event {
	id: ID!
	title: String!
	description: String!
	price: Float!
	date: String!
	user: User!
}

type User {
	id: ID!
	email: String!
	password: String
	createdAt: String
}

type Booking {
	id: ID!
	event: Event!
	user: User!
	createdAt: String!
	updatedAt: String!
}

type AuthData {
	userId: ID!
	token: String!
	tokenExp: Int!
	userName: String!
}

input EventInput {
	title: String!
	description: String!
	price: Float!
	date: String!
}

input UserInput {
	email: String!
	password: String!
}

input BookingInput {
	eventId: ID!
}

input UpdateEventInput {
	title: String
	description: String
	price: Float
	date: String
}

input UpdateUserInput {
	email: String
	password: String
}

type Query {
	events: [Event!]!
	user: User!
	bookings: [Booking!]!
	login(email: String!, password: String!): AuthData!
}

type Mutation {
	createEvent(data: EventInput!): Event!
	createUser(data: UserInput!): User!
	bookEvent(data: BookingInput!): Booking!
	cancelBooking(bookId: ID!): Booking!
	updateEvent(eventId: ID!, data: UpdateEventInput!): Event!
	updateUser(data: UpdateUserInput!): User!
}
